


        <div class="w-50">
          <span class="material-symbols-outlined text-left"> favorite </span>
          Like
        </div>

        <div>
          <span class="material-symbols-outlined text-right">
            account_circle
          </span>
          Like
        </div>














<nav class="navbar navbar-dark bg-dark fixed-top">
    <div class="container-fluid">
        <div id="logo" routerLink="/blog">
            <span class="gear">S</span>
            <h3>ESCNIL994</h3>
        </div>


        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#">Features</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#">Pricing</a>
              </li>
              <li class="nav-item">
                <a class="nav-link disabled">Disabled</a>
              </li>
            </ul>
          </div>


































    </div>
</nav>







  private readonly base_url: string = environment.backend





  constructor(
    private _http: HttpClient,
  ) { }

  get token(): string {
    return localStorage.getItem('x-token') || ''
  }




  loginUser(data: any) {
    const url = `${this.base_url}auth/login`

    return this._http.post<LoginInterface>(url, data).pipe(map(data => {
      localStorage.setItem('x-token', data.token)

      return data
    }))


  }


  validateLogin() {

    const headers = new HttpHeaders({
      'x-token': this.token,
    })


    const url = `${this.base_url}auth/validate-token`

    return this._http.get<LoginInterface>(url, {headers}).pipe(
      map(({ok}) => {
        return ok
      })
    )
  }


  //@Output() userEvent: EventEmitter<LoginInterface> = new EventEmitter<LoginInterface>
